#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
. $BP_DIR/lib/common.sh

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

export_env_dir $ENV_DIR

###Start Install NodeJs

# Download node from Heroku's S3 mirror of nodejs.org/dist
node_url="http://s3pository.heroku.com/node/v0.10.25/node-v0.10.25-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $BUILD_DIR

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
echo -n "-----> Installing Node v0.10.25..."
mv $BUILD_DIR/node-v0.10.25-linux-x64 $BUILD_DIR/vendor/node
chmod +x $BUILD_DIR/vendor/node/bin/*
export PATH="$BUILD_DIR/vendor/node/bin:$PATH"

### Finish Install NodeJs

### Start install phantomjs
PHANTOM_JS_URL="https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.8-linux-x86_64.tar.bz2"
echo "-----> Installing phantomjs...."
curl --silent --max-time 150 --location $PHANTOM_JS_URL | tar xjf - -C $BUILD_DIR
mv $BUILD_DIR/phantomjs-1.9.8-linux-x86_64 $BUILD_DIR/vendor/phantomjs
chmod +x $BUILD_DIR/vendor/phantomjs/bin/*
echo " done"
### End install phantomjs


JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz}
mkdir -p /tmp/jvm-common
curl --retry 3 --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java
. /tmp/jvm-common/opt/jdbc.sh
install_java_with_overlay ${BUILD_DIR}

### Install and start zinc
ZINC_URL="http://downloads.typesafe.com/zinc/0.3.11/zinc-0.3.11.tgz"


if [ ! -d .zinc ]; then
  echo -n "-----> Installing Zinc..."
  curl --silent --max-time 60 --location $ZINC_URL | tar xz
  mv zinc-0.3.11 .zinc
  mkdir -p .zinc/cache
  chmod +x -R .zinc/bin/*
  echo " done"
fi

ZINC_START_CMD=".zinc/bin/zinc -d .zinc/cache -java_home -nailed -start"
$ZINC_START_CMD
### end of install and start zinc

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

MAVEN_SETTINGS_URL="https://raw.githubusercontent.com/Kreditech/heroku-buildpack-java/master/opt/settings.xml"

# change to cache dir to install maven
cd $CACHE_DIR
install_maven ${CACHE_DIR} ${BUILD_DIR}

if [ -n "$MAVEN_SETTINGS_PATH" ]; then
  MAVEN_SETTINGS_OPT="-s $MAVEN_SETTINGS_PATH"
elif [ -n "$MAVEN_SETTINGS_URL" ]; then
  status_pending "Installing settings.xml"
  mkdir -p .m2
  curl --retry 3 --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
  status_done
  MAVEN_SETTINGS_OPT="-s $CACHE_DIR/.m2/settings.xml"
elif [ -f $BUILD_DIR/settings.xml ]; then
  MAVEN_SETTINGS_OPT="-s $BUILD_DIR/settings.xml"
else
  unset MAVEN_SETTINGS_OPT
fi

export NEXUS_READER_PWD=$(cat $ENV_DIR/NEXUS_READER_PWD)
echo -n "-----> Installing settings.xml..."
if [ -f .m2/settings.xml ]; then
  rm .m2/settings.xml
fi

if [ ! -d .m2 ]; then
  echo -n "Making dir .m2... "
  mkdir .m2
fi

curl --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
echo " done"

# change to build dir to run maven
cd $BUILD_DIR

export MAVEN_OPTS="-Xmx1024m ${MAVEN_JAVA_OPTS} -Duser.home=$BUILD_DIR -Dmaven.repo.local=$CACHE_DIR/.m2/repository -Dmaven.test.skip=true"


# check if DB is up to date
if [ -f $ENV_DIR/DATABASE_URL ] && [ -f db/pom.xml ]; then # This buildback can be used for apps other then LPA (e.g. clerk)
    echo "------> checking if DB is up to date"
    DB_URL=$(cat $ENV_DIR/DATABASE_URL)

    DB_URL_PARTS=( $(echo $DB_URL | sed 's/postgres:\/\/\([[:alnum:]]\+\):\([[:alnum:]]\+\)@\([^:/]\+:[[:digit:]]\+\/[[:alnum:]]\+\).*/\1 \2 \3/') )
    DB_USER=${DB_URL_PARTS[0]}
    DB_PWD=${DB_URL_PARTS[1]}
    DB_JDBC_URL="jdbc:postgresql://${DB_URL_PARTS[2]}?ssl=true&sslfactory=org.postgresql.ssl.NonValidatingFactory"
    echo JDBC URL=$DB_JDBC_URL

    $CACHE_DIR/.maven/bin/mvn liquibase:updateSQL -f db/pom.xml -Dliquibase.url=$DB_JDBC_URL -Dliquibase.username=$DB_USER -Dliquibase.password=$DB_PWD -B -Duser.home=$BUILD_DIR -Dmaven.repo.local=$CACHE_DIR/.m2/repository -s $CACHE_DIR/.m2/settings.xml

    echo "------> listing dirs:"
    ls $BUILD_DIR

    UPDATE_SQL_FILE=$BUILD_DIR/db/target/liquibase/migrate.sql
    if grep -m 1 -q ^\\s\*\\w\\+ "$UPDATE_SQL_FILE"; then
        echo "-------> DB misses following updates - aborting deploy:"
        cat $UPDATE_SQL_FILE
        exit 1
    elif [ ! -f $UPDATE_SQL_FILE ]; then
        echo "-------> Buildpack is broken - can't check if DB needs update. Aborting deploy."
        exit 1
    else
        echo "------> DB is up to date, OK to depoy"
    fi
fi


# build app
mvnOpts="-B"
mvnOpts="${mvnOpts}${MAVEN_SETTINGS_OPT:+ $MAVEN_SETTINGS_OPT}"
mvnOpts="${mvnOpts} ${MAVEN_CUSTOM_OPTS:-"-DskipTests"}"
mvnOpts="${mvnOpts} ${MAVEN_CUSTOM_GOALS:-"clean dependency:list install -U"}"

status "Executing: mvn ${mvnOpts}"
$CACHE_DIR/.maven/bin/mvn -DoutputFile=target/mvn-dependency-list.log ${mvnOpts} | indent

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  error "Failed to build app with Maven
We're sorry this build is failing! If you can't find the issue in application code,
please submit a ticket so we can help: https://help.heroku.com/"
fi
